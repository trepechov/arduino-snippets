/* Comment this out to disable prints and save space */
#define BLYNK_PRINT Serial

#include <Wire.h>
#include <Adafruit_BMP085.h>
#include <ESP8266WiFi.h>
#include <BlynkSimpleEsp8266.h>

#define RSTPIN D0
#define BATPIN A0

// You should get Auth Token in the Blynk App.
// Go to the Project Settings (nut icon).
char auth[] = "ae1ac49356d142f69dc3a1f066628831";

// Your WiFi credentials.
// Set password to "" for open networks.
char ssid1[] = "MB";
char ssid2[] = "Trepechov";
char pass[] = "azimitaka2";

int sleepMinutes = 1; // Sleep to 1 minunte
float temperature, pressure;
Adafruit_BMP085 bmp;

bool connectWiFi(char ssid[], char pass[], int retry) 
{
  Serial.printf("\nConnecting to %s", ssid);
  WiFi.begin(ssid, pass);
  int i = 0;
  while (WiFi.status() != WL_CONNECTED) {
    i++;
    Serial.print(".");
    if (i++ > retry)
    {
      WiFi.disconnect();
      Serial.println(" Can't connect!");
      return false;
    }
    delay(3000);
  }
  Serial.println(" Connected!");
  return true;
}

// This function sends Arduino's up time every second to Virtual Pin (5).
// In the app, Widget's reading frequency should be set to PUSH. This means
// that you define how often to send data to Blynk App.
void processSensor()
{
  float temperature = bmp.readTemperature();
  float pressure = bmp.readPressure() / 100;

  if (isnan(temperature) || isnan(pressure)) {
    Serial.println("Failed to read from BMP180 sensor!");
    return;
  }

  Serial.printf("\nTemperature:\t%0.1f *C\nPressure:\t%0.0f hPa\n\n", temperature, pressure); 
  // You can send any value at any time.
  // Please don't send more that 10 values per second.
  Blynk.virtualWrite(V6, temperature);
  Blynk.virtualWrite(V8, pressure);
}

float readBattery()
{
  float v = analogRead(BATPIN);
  return v;
}

void blink(int i)
{
  int j;
  for (j = 0; j < i; j++)
  {
    digitalWrite(LED_BUILTIN, LOW);   // Turn the LED on (Note that LOW is the voltage level
                                      // but actually the LED is on; this is because 
                                      // it is active low on the ESP-01)
    delay(500);                       // Wait for a second
    digitalWrite(LED_BUILTIN, HIGH);  // Turn the LED off by making the voltage HIGH
    delay(500);
  }
}

BLYNK_WRITE(V4) 
{
   sleepMinutes = param.asInt();
   Serial.printf("Read V4 slider value - %i\n\n", sleepMinutes);
}

void setup()
{
  Serial.begin(9600);
  pinMode(LED_BUILTIN, OUTPUT);  
  pinMode(RSTPIN, WAKEUP_PULLUP);
  digitalWrite(LED_BUILTIN, HIGH);
  
  bool connected = false;
  if (connectWiFi(ssid1, pass, 3)) {
    connected = true;
  }
  if (!connected && connectWiFi(ssid2, pass, 3)) {
    connected = true;  
  }
  
  if (connected) {
    Blynk.config(auth);
   // Blynk.begin(auth, ssid1, pass);
    
    if (!bmp.begin()) {
      Serial.println("Could not find a valid BMP085 sensor, check wiring!");
    }
    Blynk.run();
    Blynk.syncVirtual(V4);
    processSensor();
    Blynk.virtualWrite(V2, readBattery());
    Blynk.run();
  }
  Serial.printf("Sleep for %i minutes\n\n", sleepMinutes);
  blink(sleepMinutes);
  ESP.deepSleep(sleepMinutes * 60 * 1000000);
}

void loop()
{
  //  Blynk.run();
  //  timer.run();
}
